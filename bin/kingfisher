#!/usr/bin/env python3

__author__ = "Ben Woodcroft"
__copyright__ = "Copyright 2021"
__credits__ = ["Ben Woodcroft"]
__license__ = "GPL3+"
__maintainer__ = "Ben Woodcroft"
__email__ = "b.woodcroft near qut.edu.au"
__status__ = "Development"

import argparse
import os
import sys
import logging

sys.path = [os.path.join(os.path.dirname(os.path.realpath(__file__)),'..')] + sys.path
import kingfisher

if __name__ == '__main__':
    parser= argparse.ArgumentParser(
        description='Download and extract FASTQ files from the NCBI SRA or ENA databases. \
            Requires the SRA toolkit to be installed, available at \
            https://github.com/ncbi/sra-tools - a list of conda \
            requirements (excluding AWS\' CLIv2, Google Cloud\'s gsutil/gcloud and Aspera connect) \
            is: python extern pigz sra-tools')
    parser.add_argument(
        '--run-identifier','--run_identifier','-r',
        help='Run number to download e.g. ERR1739691',
        required=True)
    parser.add_argument(
        '-m','--download_methods', '--download-methods',
        nargs='+',
        help='How to download .sra file. If multiple are specified, each is tried in turn until one works.',
        choices=['aws-http', 'prefetch', 'aws-cp', 'gcp-cp', 'ena-ascp','ena-ftp'], required=True)
    parser.add_argument(
        '--output-format-possibilities', '--output_format_possibilities',
        nargs='+',
        help='Allowable output formats. If more than one is specified, downloaded data will processed as little as possible.',
        choices=['sra', 'fastq', 'fastq.gz','fasta','fasta.gz'],
        default=kingfisher.DEFAULT_OUTPUT_FORMAT_POSSIBILITIES)
    parser.add_argument(
        '--unsorted',
        action='store_true',
        help='Currently requires "--output-format-possibilities fasta" and "--stdout" and download from NCBI rather than ENA. \
            Output the sequences in a single file, where the reads are in arbitrary order. \
            Even pairs of reads may be split up, but it is possible to tell which pair \
            is which, and which is a forward and which is a reverse read from the name.')
    parser.add_argument(
        '--stdout',
        action='store_true',
        help='Output sequences to STDOUT. Currently requires --unsorted')
    parser.add_argument(
        '--gcp-project', '--gcp_project',
        help='Downloading from Google Cloud buckets require a Google project to charge '
        '(they are requester-pays) e.g. \'my-project\'. This can alternately be set '
        'beforehand using \'gcloud config set project PROJECT_ID\' '
        '[default: value of `gcloud config get-value project` command]')
    parser.add_argument(
        '--gcp-user-key-file', '--gcp_user_key_file',
        help='Downloading from Google Cloud buckets requires a Google user to be setup. \
            Use this option to specify a JSON-formatted service account key, as per \
            https://cloud.google.com/iam/docs/creating-managing-service-account-keys \
            [default: not used]')
    parser.add_argument(
        '--aws-user-key-id', '--aws_user_key_id',
        help='Downloading from AWS requester pays buckets requires a key ID and secret key \
            [default: not used]')
    parser.add_argument(
        '--aws-user-key-secret', '--aws_user_key_secret',
        help='Downloading from AWS requester pays buckets requires a key ID and secret key \
            [default: not used]')
    parser.add_argument(
        '--allow-paid', '--allow_paid',
        help='Allow downloading from retriever-pays s3 and GCP buckets',
        action='store_true')
    parser.add_argument(
        '--allow-paid-from-gcp', '--allow_paid_from_gcp',
        help='Allow downloading from retriever-pays GCP buckets',
        action='store_true')
    parser.add_argument(
        '--allow-paid-from-aws', '--allow_paid_from_aws',
        help='Allow downloading from retriever-pays AWS buckets',
        action='store_true')
    parser.add_argument(
        '--ascp-ssh-key', '--ascp_ssh_key',
        help='\'linux\' or \'osx\' for default paths used in each OS respectively, \
            otherwise a path to the openssh key to used for aspera (i.e. the \
            -i flag of ascp) [default: \'{}\']'.format(kingfisher.DEFAULT_ASPERA_SSH_KEY),
        default=kingfisher.DEFAULT_ASPERA_SSH_KEY)
    parser.add_argument(
        '--ascp-args', '--ascp_args',
        help='extra arguments to pass to ascp e.g. \'-k 2\' to resume with a \
        sparse file checksum [default: \'\']',
        default='')

    parser.add_argument('--debug', help='output debug information',
                        action="store_true", default=False)
    parser.add_argument('--quiet', help='only output errors',
                        action="store_true", default=False)
    args= parser.parse_args()

    if args.debug:
        loglevel= logging.DEBUG
    elif args.quiet:
        loglevel= logging.ERROR
    else:
        loglevel= logging.INFO
    logging.basicConfig(
        level=loglevel, format='%(asctime)s %(levelname)s: %(message)s',
        datefmt='%m/%d/%Y %I:%M:%S %p')

    kingfisher.download_and_extract(
        run_identifier = args.run_identifier,
        download_methods = args.download_methods,
        output_format_possibilities = args.output_format_possibilities,
        unsorted = args.unsorted,
        stdout = args.stdout,
        gcp_project = args.gcp_project,
        gcp_user_key_file = args.gcp_user_key_file,
        aws_user_key_id = args.aws_user_key_id,
        aws_user_key_secret = args.aws_user_key_secret,
        allow_paid = args.allow_paid,
        allow_paid_from_gcp = args.allow_paid_from_gcp,
        allow_paid_from_aws = args.allow_paid_from_aws,
        ascp_ssh_key = args.ascp_ssh_key,
        ascp_args = args.ascp_args
    )

    logging.info("Kingfisher done.")
